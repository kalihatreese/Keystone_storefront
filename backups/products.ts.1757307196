import fs from "fs";
import path from "path";

// Load store data once at build/dev start
const storePath = path.join(process.cwd(), "data", "store.json");
const raw = fs.readFileSync(storePath, "utf8");
const STORE = JSON.parse(raw) as any[];

type P = {
  id?: string;
  sku?: string;
  slug?: string;
  title?: string;
  name?: string;
  price?: number | string;
  price_cents?: number;
  pricing?: { price?: number | string };
  images?: string[];
  image?: string;
  img?: string;
  currency?: string;
  [k: string]: any;
};

function toNumber(x: any): number | undefined {
  if (x == null) return undefined;
  if (typeof x === "number" && !Number.isNaN(x)) return x;
  if (typeof x === "string") {
    const s = x.replace(/[^0-9.,-]/g, "").replace(",", ".");
    const n = Number(s);
    if (!Number.isNaN(n)) return n;
  }
  return undefined;
}

function chooseId(p: P): string {
  return (p.sku || p.slug || p.id || p.name || p.title || "unknown").toString();
}

function chooseImage(p: P): string {
  const cands = [
    p.image,
    p.img,
    Array.isArray(p.images) ? p.images[0] : undefined,
    `/images/${p.sku || p.slug || p.id}.jpg`,
    `/images/${p.sku || p.slug || p.id}.png`,
  ].filter(Boolean) as string[];
  return cands[0] || "/images/placeholder.png";
}

function normalize(p: P) {
  // price sources in priority order
  const price =
    toNumber(p.price) ??
    toNumber(p.pricing?.price) ??
    (typeof p.price_cents === "number" ? p.price_cents / 100 : undefined);

  const normalized = {
    id: chooseId(p),
    title: (p.title || p.name || "").toString(),
    price: typeof price === "number" && price > 0 ? Number(price.toFixed(2)) : 0,
    currency: p.currency || "USD",
    image: chooseImage(p),
    images: Array.isArray(p.images) && p.images.length ? p.images : [chooseImage(p)],
    ...p,
  };
  return normalized;
}

export function getProducts() {
  return STORE.map(normalize);
}

export function getProductById(id: string) {
  return getProducts().find((p) => p.id === id);
}
